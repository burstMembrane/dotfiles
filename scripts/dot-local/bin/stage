#!/bin/bash

# Git Interactive Staging with fzf
# Allows you to stage, unstage, discard, stash changes, or quit interactively.

# Customizable keybindings
KEY_STAGE="s"      # Stage file(s) (git add)
KEY_UNSTAGE="u"    # Unstage file(s) (git restore --staged)
KEY_DISCARD="d"    # Discard changes (git restore)
KEY_STASH="x"      # Stash file(s) (git stash push --)
KEY_QUIT="q"       # Quit fzf interface
KEY_COMMIT="c"     # Commit changes
# Move to the root of the Git repository
cd "$(git rev-parse --show-toplevel)" || exit 1
# Check for changes
if [ -z "$(git status --short)" ]; then
  git status
  exit 0
fi

delta_cmd='delta --line-numbers --no-gitconfig --file-style="" --line-numbers-minus-style="" --line-numbers-plus-style="" --hunk-header-decoration-style "ul"'
# Define the preview command
preview_cmd="
  file=\$(echo {} | cut -c4-)
  if git ls-files --error-unmatch \"\$file\" &>/dev/null; then
    if git diff --cached -- \"\$file\" | ${delta_cmd} | grep .; then
      git diff --cached -- \"\$file\" | ${delta_cmd}
    else
      git diff -- \"\$file\" | ${delta_cmd}
    fi
  else
    cat \"\$file\"
  fi
"
# Sort files by filename while preserving `git status` output
fzf -m --reverse \
  --bind "start:reload: git status --short" \
  --header "STAGE: [$KEY_STAGE] Stage | [$KEY_UNSTAGE] Unstage | [$KEY_DISCARD] Discard | [$KEY_STASH] Stash | [$KEY_QUIT] Quit" \
  --disabled --ansi --preview-window=right:70% \
  --preview "$preview_cmd" \
  --bind "$KEY_STAGE:execute(git add {2})" \
  --bind "$KEY_UNSTAGE:execute(git restore --staged {2})" \
  --bind "$KEY_DISCARD:execute(git restore {2})" \
  --bind "$KEY_STASH:execute(git stash push -- {2})" \
  --bind "$KEY_COMMIT:become(git commit)" \
  --bind "$KEY_QUIT:abort"
